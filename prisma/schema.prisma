// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  isAdmin Boolean @default(false)
  PermanentAddress String?
  firstName String?
  lastName String?
  mobile String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  cart Cart?
  saveditem SavedItem?
  ratingreviews Ratingreview[]
  checkout Checkout?

  @@map("users")
}

model Product {
  id Int @id @default(autoincrement())
  productname String
  brandname String
  price Int?
  rating Int?
  featuredproduct Boolean @default(false)
  quantity Int
  itembuy Int @default(1)
  image String
  description String
  incarted Boolean @default(false)

  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  brandId Int
  brand Brand @relation(fields: [brandId], references: [id])
  carts CartOnProduct[]
  orders Order[]
  saveditems SavedItem[]
  ratingreviews Ratingreview[]
  orderItems OrderItem[]

  @@map("products")
}

model Category {
  id Int @id @default(autoincrement())
  title String
  description String
  products Product[]

  @@map("categories")
}

model Brand {
  id Int @id @default(autoincrement())
  title String
  description String
  products Product[]

  @@map("brands")
}

model OrderItem {
  id Int @id @default(autoincrement())
  quantity Int
  Amount Int
  TotalAmount Int
  createdAt DateTime @default(now())

  productId Int
  product Product @relation(fields: [productId], references: [id])
  orderId String
  order Order @relation(fields: [orderId], references: [id])

  @@map("orderitems")
}

model Order {
  id String @id @default(uuid())
  itemnumber Int
  totalprice Int
  transactionstatus String @default("pending")
  paymentmethod String @default("Flutterwave")
  deliverymethod String @default("Door Delivery")
  shippedaddress String @default("")
  createdAt DateTime @default(now())

  products Product[]
  userId Int
  user User @relation(fields: [userId],references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model Checkout {
  id Int @id @default(autoincrement())
  subtotal Int @default(0)
  taxcharge Int @default(0)
  discount Int @default(0)
  deliveryfee Int @default(0)
  totalamount Int @default(0)
  itemtotal Int @default(0)

  userId Int @unique
  user User @relation(fields: [userId],references: [id])

  @@map("checkouts")
}

model Cart {
  id Int @id @default(autoincrement())
  carttotal Int @default(0)

  cartonproducts CartOnProduct[]
  userId Int @unique
  user User @relation(fields: [userId],references: [id])

  @@map("carts")
}

model CartOnProduct {
  id Int @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId Int
  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int
  quantity Int

  @@unique([productId,cartId])
}

model SavedItem {
  id Int @id @default(autoincrement())
  itemnumber String?

  products Product[]
  userId Int @unique
  user User @relation(fields: [userId],references: [id])

  @@map("saveditems")
}

model Ratingreview {
  id Int @id @default(autoincrement())
  rating String
  title String?
  comment String?
  createdAt DateTime @default(now())

  productId Int
  product Product @relation(fields: [productId],references: [id])
  userId Int
  user User @relation(fields: [userId],references: [id])

  @@map("ratingreviews")
}